plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '[7.0.57,8.0)'
}

apply from: "./Compound/properties.gradle" // we have to have Compound here to even compile, just snag the version and group data from it directly.
modBaseName = "molecule"

evaluationDependsOn(':Compound')

version = modVersion
group = modGroup
archivesBaseName = modBaseName

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

if (ext.mappingsChannel == "parchment") {
    var parchmentMCVersion = ext.mappingsMinecraftVersion
    var parchmentMappingsVersion = ext.mappingsVersion
    subsystems {
        parchment {
            setMinecraftVersion(parchmentMCVersion)
            setMappingsVersion(parchmentMappingsVersion)
        }
    }
}

// Add the sourceSets from the Compound project to this project, we can't use it as a dependency because NeoGradle gets confused.
sourceSets {
    main {
        java {
            srcDirs += project(':Compound').sourceSets.main.java.srcDirs
        }
        resources {
            srcDirs += project(':Compound').sourceSets.main.resources.srcDirs
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${forgeVersion}"
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSources.add(project.sourceSets.main)
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.modBaseName
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.modBaseName
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.modBaseName
    }

    data {
        programArguments.addAll '--mod', project.modBaseName, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes(["Specification-Title"     : "Molecule",
                    "Specification-Vendor"    : "Trident",
                    "Specification-Version"   : "24.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "Trident",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
